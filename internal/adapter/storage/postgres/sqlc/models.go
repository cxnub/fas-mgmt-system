// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pg

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type EmploymentStatus string

const (
	EmploymentStatusEmployed   EmploymentStatus = "employed"
	EmploymentStatusUnemployed EmploymentStatus = "unemployed"
)

func (e *EmploymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmploymentStatus(s)
	case string:
		*e = EmploymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EmploymentStatus: %T", src)
	}
	return nil
}

type NullEmploymentStatus struct {
	EmploymentStatus EmploymentStatus
	Valid            bool // Valid is true if EmploymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmploymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EmploymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmploymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmploymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmploymentStatus), nil
}

type MaritalStatus string

const (
	MaritalStatusSingle  MaritalStatus = "single"
	MaritalStatusMarried MaritalStatus = "married"
	MaritalStatusWidowed MaritalStatus = "widowed"
	MaritalStatusDivorce MaritalStatus = "divorce"
)

func (e *MaritalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaritalStatus(s)
	case string:
		*e = MaritalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MaritalStatus: %T", src)
	}
	return nil
}

type NullMaritalStatus struct {
	MaritalStatus MaritalStatus
	Valid         bool // Valid is true if MaritalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaritalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MaritalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaritalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaritalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaritalStatus), nil
}

type RelationshipType string

const (
	RelationshipTypeSpouse  RelationshipType = "spouse"
	RelationshipTypeChild   RelationshipType = "child"
	RelationshipTypeParent  RelationshipType = "parent"
	RelationshipTypeSibling RelationshipType = "sibling"
)

func (e *RelationshipType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelationshipType(s)
	case string:
		*e = RelationshipType(s)
	default:
		return fmt.Errorf("unsupported scan type for RelationshipType: %T", src)
	}
	return nil
}

type NullRelationshipType struct {
	RelationshipType RelationshipType
	Valid            bool // Valid is true if RelationshipType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationshipType) Scan(value interface{}) error {
	if value == nil {
		ns.RelationshipType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelationshipType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationshipType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelationshipType), nil
}

type Sex string

const (
	SexMale   Sex = "male"
	SexFemale Sex = "female"
)

func (e *Sex) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Sex(s)
	case string:
		*e = Sex(s)
	default:
		return fmt.Errorf("unsupported scan type for Sex: %T", src)
	}
	return nil
}

type NullSex struct {
	Sex   Sex
	Valid bool // Valid is true if Sex is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSex) Scan(value interface{}) error {
	if value == nil {
		ns.Sex, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Sex.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSex) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Sex), nil
}

type Applicant struct {
	ID               uuid.UUID
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	DeletedAt        pgtype.Timestamp
	Name             string
	EmploymentStatus EmploymentStatus
	MaritalStatus    MaritalStatus
	Sex              Sex
	DateOfBirth      pgtype.Date
}

type Application struct {
	ID          uuid.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	DeletedAt   pgtype.Timestamp
	ApplicantID uuid.UUID
	SchemeID    uuid.UUID
}

type Benefit struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	SchemeID  uuid.UUID
	Name      string
	Amount    pgtype.Float8
}

type BenefitCriterium struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Name      string
	Value     pgtype.Text
	BenefitID uuid.UUID
}

type Relationship struct {
	ID               uuid.UUID
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	DeletedAt        pgtype.Timestamp
	ApplicantAID     uuid.UUID
	ApplicantBID     uuid.UUID
	RelationshipType RelationshipType
}

type Scheme struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Name      string
}

type SchemeCriterium struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Name      string
	Value     pgtype.Text
	SchemeID  uuid.UUID
}
