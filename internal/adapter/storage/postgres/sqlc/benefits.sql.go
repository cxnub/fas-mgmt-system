// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: benefits.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBenefit = `-- name: CreateBenefit :one
INSERT INTO benefits (
    id,
    created_at,
    scheme_id,
    name,
    amount
) VALUES (
            gen_random_uuid(), now(), $1, $2, $3
         )
RETURNING id, created_at, updated_at, deleted_at, scheme_id, name, amount
`

type CreateBenefitParams struct {
	SchemeID uuid.UUID
	Name     string
	Amount   pgtype.Float8
}

// Used when creating a scheme with benefits
func (q *Queries) CreateBenefit(ctx context.Context, arg CreateBenefitParams) (Benefit, error) {
	row := q.db.QueryRow(ctx, createBenefit, arg.SchemeID, arg.Name, arg.Amount)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SchemeID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const deleteBenefit = `-- name: DeleteBenefit :exec
UPDATE benefits
SET
    deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

// Used when deleting scheme benefits
func (q *Queries) DeleteBenefit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBenefit, id)
	return err
}

const getBenefitByID = `-- name: GetBenefitByID :one
SELECT id, created_at, updated_at, deleted_at, scheme_id, name, amount FROM benefits
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

// Used for getting benefits by id
func (q *Queries) GetBenefitByID(ctx context.Context, id uuid.UUID) (Benefit, error) {
	row := q.db.QueryRow(ctx, getBenefitByID, id)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SchemeID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const getBenefitsByScheme = `-- name: GetBenefitsByScheme :many

SELECT id, created_at, updated_at, deleted_at, scheme_id, name, amount FROM benefits
WHERE scheme_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

// db/query/benefits.sql
// Used for getting benefits for a scheme
func (q *Queries) GetBenefitsByScheme(ctx context.Context, schemeID uuid.UUID) ([]Benefit, error) {
	rows, err := q.db.Query(ctx, getBenefitsByScheme, schemeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Benefit
	for rows.Next() {
		var i Benefit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.SchemeID,
			&i.Name,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBenefits = `-- name: ListBenefits :many
SELECT id, created_at, updated_at, deleted_at, scheme_id, name, amount FROM benefits
WHERE deleted_at is NULL
`

// Used to get a list of all scheme benefits
func (q *Queries) ListBenefits(ctx context.Context) ([]Benefit, error) {
	rows, err := q.db.Query(ctx, listBenefits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Benefit
	for rows.Next() {
		var i Benefit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.SchemeID,
			&i.Name,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBenefit = `-- name: UpdateBenefit :one
UPDATE benefits
SET
    name = $2,
    amount = $3
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, scheme_id, name, amount
`

type UpdateBenefitParams struct {
	ID     uuid.UUID
	Name   string
	Amount pgtype.Float8
}

// Used when updating scheme benefits
func (q *Queries) UpdateBenefit(ctx context.Context, arg UpdateBenefitParams) (Benefit, error) {
	row := q.db.QueryRow(ctx, updateBenefit, arg.ID, arg.Name, arg.Amount)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SchemeID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}
