// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pg

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	// Used for POST /api/applicants
	CreateApplicant(ctx context.Context, arg CreateApplicantParams) (Applicant, error)
	// Used for POST /api/applications
	CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error)
	// Used when creating a scheme with benefits
	CreateBenefit(ctx context.Context, arg CreateBenefitParams) (Benefit, error)
	CreateBenefitCriteria(ctx context.Context, arg CreateBenefitCriteriaParams) error
	// Used for POST /api/schemes
	CreateScheme(ctx context.Context, name string) (Scheme, error)
	// Used when creating a scheme with criteria
	CreateSchemeCriteria(ctx context.Context, arg CreateSchemeCriteriaParams) (SchemeCriterium, error)
	// Used for DELETE /api/applicants/{id}
	DeleteApplicant(ctx context.Context, id uuid.UUID) error
	// Used for DELETE /api/applications/{id}
	DeleteApplication(ctx context.Context, id uuid.UUID) error
	// Used when deleting scheme benefits
	DeleteBenefit(ctx context.Context, id uuid.UUID) error
	DeleteBenefitCriteria(ctx context.Context, id uuid.UUID) error
	// Used for DELETE /api/schemes/{id}
	DeleteScheme(ctx context.Context, id uuid.UUID) error
	// Used when deleting scheme criteria
	DeleteSchemeCriteria(ctx context.Context, id uuid.UUID) error
	GetAllBenefitCriteria(ctx context.Context) ([]BenefitCriterium, error)
	// db/query/applicants.sql
	// Used for GET /api/applicants/{id}
	GetApplicant(ctx context.Context, id uuid.UUID) (Applicant, error)
	// Used for getting an applicant with their family members
	GetApplicantWithFamily(ctx context.Context, id uuid.UUID) ([]GetApplicantWithFamilyRow, error)
	// db/query/applications.sql
	// Used for GET /api/applications/{id}
	GetApplication(ctx context.Context, id uuid.UUID) (Application, error)
	// Used for getting applications for a specific applicant
	GetApplicationsByApplicant(ctx context.Context, applicantID uuid.UUID) ([]Application, error)
	// Used for getting applications with applicant and scheme details
	GetApplicationsWithDetails(ctx context.Context, arg GetApplicationsWithDetailsParams) ([]GetApplicationsWithDetailsRow, error)
	// Used for getting benefits by id
	GetBenefitByID(ctx context.Context, id uuid.UUID) (Benefit, error)
	GetBenefitCriteriaByBenefitID(ctx context.Context, benefitID uuid.UUID) ([]BenefitCriterium, error)
	GetBenefitCriteriaByID(ctx context.Context, id uuid.UUID) (BenefitCriterium, error)
	// db/query/benefits.sql
	// Used for getting benefits for a scheme
	GetBenefitsByScheme(ctx context.Context, schemeID uuid.UUID) ([]Benefit, error)
	// db/query/schemes.sql
	// Used for GET /api/schemes/{id}
	GetScheme(ctx context.Context, id uuid.UUID) (Scheme, error)
	// db/query/scheme_criteria.sql
	// Used for getting criteria for a scheme
	GetSchemeCriteria(ctx context.Context, schemeID uuid.UUID) ([]SchemeCriterium, error)
	// Used for getting scheme criteria by ID
	GetSchemeCriteriaByID(ctx context.Context, id uuid.UUID) (SchemeCriterium, error)
	// Used for getting a scheme with its benefits
	GetSchemeWithBenefits(ctx context.Context, id uuid.UUID) ([]GetSchemeWithBenefitsRow, error)
	// Used for getting a scheme with its criteria
	GetSchemeWithCriteriaAndBenefits(ctx context.Context, id uuid.UUID) ([]GetSchemeWithCriteriaAndBenefitsRow, error)
	// Used for GET /api/applicants
	ListApplicants(ctx context.Context) ([]Applicant, error)
	// Used for GET /api/applications
	ListApplications(ctx context.Context) ([]Application, error)
	// Used for GET /api/schemes
	ListSchemes(ctx context.Context) ([]Scheme, error)
	// Used for PUT /api/applicants/{id}
	UpdateApplicant(ctx context.Context, arg UpdateApplicantParams) (Applicant, error)
	// Used for PUT /api/applications/{id}
	UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error)
	// Used when updating scheme benefits
	UpdateBenefit(ctx context.Context, arg UpdateBenefitParams) (Benefit, error)
	UpdateBenefitCriteria(ctx context.Context, arg UpdateBenefitCriteriaParams) error
	// Used for PUT /api/schemes/{id}
	UpdateScheme(ctx context.Context, arg UpdateSchemeParams) (Scheme, error)
	// Used when updating scheme criteria
	UpdateSchemeCriteria(ctx context.Context, arg UpdateSchemeCriteriaParams) (SchemeCriterium, error)
}

var _ Querier = (*Queries)(nil)
