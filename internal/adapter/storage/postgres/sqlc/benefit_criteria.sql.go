// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: benefit_criteria.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBenefitCriteria = `-- name: CreateBenefitCriteria :exec
INSERT INTO benefit_criteria (id, created_at, name, value, benefit_id)
VALUES (gen_random_uuid(), now(), $1, $2, $3)
`

type CreateBenefitCriteriaParams struct {
	Name      string
	Value     pgtype.Text
	BenefitID uuid.UUID
}

func (q *Queries) CreateBenefitCriteria(ctx context.Context, arg CreateBenefitCriteriaParams) error {
	_, err := q.db.Exec(ctx, createBenefitCriteria, arg.Name, arg.Value, arg.BenefitID)
	return err
}

const deleteBenefitCriteria = `-- name: DeleteBenefitCriteria :exec
UPDATE benefit_criteria
SET
    deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteBenefitCriteria(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBenefitCriteria, id)
	return err
}

const getAllBenefitCriteria = `-- name: GetAllBenefitCriteria :many
SELECT id, created_at, updated_at, deleted_at, name, value, benefit_id
FROM benefit_criteria
WHERE deleted_at IS NULL
`

func (q *Queries) GetAllBenefitCriteria(ctx context.Context) ([]BenefitCriterium, error) {
	rows, err := q.db.Query(ctx, getAllBenefitCriteria)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BenefitCriterium
	for rows.Next() {
		var i BenefitCriterium
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Value,
			&i.BenefitID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBenefitCriteriaByBenefitID = `-- name: GetBenefitCriteriaByBenefitID :many
SELECT id, created_at, updated_at, deleted_at, name, value, benefit_id
FROM benefit_criteria
WHERE benefit_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetBenefitCriteriaByBenefitID(ctx context.Context, benefitID uuid.UUID) ([]BenefitCriterium, error) {
	rows, err := q.db.Query(ctx, getBenefitCriteriaByBenefitID, benefitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BenefitCriterium
	for rows.Next() {
		var i BenefitCriterium
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Value,
			&i.BenefitID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBenefitCriteriaByID = `-- name: GetBenefitCriteriaByID :one
SELECT id, created_at, updated_at, deleted_at, name, value, benefit_id
FROM benefit_criteria
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetBenefitCriteriaByID(ctx context.Context, id uuid.UUID) (BenefitCriterium, error) {
	row := q.db.QueryRow(ctx, getBenefitCriteriaByID, id)
	var i BenefitCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Value,
		&i.BenefitID,
	)
	return i, err
}

const updateBenefitCriteria = `-- name: UpdateBenefitCriteria :exec
UPDATE benefit_criteria
SET name       = $1,
    value      = $2
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateBenefitCriteriaParams struct {
	Name  string
	Value pgtype.Text
	ID    uuid.UUID
}

func (q *Queries) UpdateBenefitCriteria(ctx context.Context, arg UpdateBenefitCriteriaParams) error {
	_, err := q.db.Exec(ctx, updateBenefitCriteria, arg.Name, arg.Value, arg.ID)
	return err
}
