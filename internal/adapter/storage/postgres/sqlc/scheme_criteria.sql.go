// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: scheme_criteria.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSchemeCriteria = `-- name: CreateSchemeCriteria :one
INSERT INTO scheme_criteria (
    id,
    created_at,
    name,
    value,
    scheme_id
) VALUES (
             gen_random_uuid(), now(), $1, $2, $3
         )
RETURNING id, created_at, updated_at, deleted_at, name, value, scheme_id
`

type CreateSchemeCriteriaParams struct {
	Name     string
	Value    pgtype.Text
	SchemeID uuid.UUID
}

// Used when creating a scheme with criteria
func (q *Queries) CreateSchemeCriteria(ctx context.Context, arg CreateSchemeCriteriaParams) (SchemeCriterium, error) {
	row := q.db.QueryRow(ctx, createSchemeCriteria, arg.Name, arg.Value, arg.SchemeID)
	var i SchemeCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Value,
		&i.SchemeID,
	)
	return i, err
}

const deleteSchemeCriteria = `-- name: DeleteSchemeCriteria :exec
UPDATE scheme_criteria
SET
    deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

// Used when deleting scheme criteria
func (q *Queries) DeleteSchemeCriteria(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSchemeCriteria, id)
	return err
}

const getSchemeCriteria = `-- name: GetSchemeCriteria :many

SELECT id, created_at, updated_at, deleted_at, name, value, scheme_id FROM scheme_criteria
WHERE scheme_id = $1 AND deleted_at IS NULL
`

// db/query/scheme_criteria.sql
// Used for getting criteria for a scheme
func (q *Queries) GetSchemeCriteria(ctx context.Context, schemeID uuid.UUID) ([]SchemeCriterium, error) {
	rows, err := q.db.Query(ctx, getSchemeCriteria, schemeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchemeCriterium
	for rows.Next() {
		var i SchemeCriterium
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Value,
			&i.SchemeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchemeCriteria = `-- name: UpdateSchemeCriteria :one
UPDATE scheme_criteria
SET
    name = $2,
    value = $3
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, name, value, scheme_id
`

type UpdateSchemeCriteriaParams struct {
	ID    uuid.UUID
	Name  string
	Value pgtype.Text
}

// Used when updating scheme criteria
func (q *Queries) UpdateSchemeCriteria(ctx context.Context, arg UpdateSchemeCriteriaParams) (SchemeCriterium, error) {
	row := q.db.QueryRow(ctx, updateSchemeCriteria, arg.ID, arg.Name, arg.Value)
	var i SchemeCriterium
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Value,
		&i.SchemeID,
	)
	return i, err
}
